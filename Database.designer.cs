#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SMSEngine
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Meraji")]
	public partial class DatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertInstallation(Installation instance);
    partial void UpdateInstallation(Installation instance);
    partial void DeleteInstallation(Installation instance);
    partial void InsertSoftware(Software instance);
    partial void UpdateSoftware(Software instance);
    partial void DeleteSoftware(Software instance);
    partial void InsertSM(SM instance);
    partial void UpdateSM(SM instance);
    partial void DeleteSM(SM instance);
    partial void InsertSoftwareLisence(SoftwareLisence instance);
    partial void UpdateSoftwareLisence(SoftwareLisence instance);
    partial void DeleteSoftwareLisence(SoftwareLisence instance);
    #endregion
		
		public DatabaseDataContext() : 
				base(global::SMSEngine.Properties.Settings.Default.MerajiConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Installation> Installations
		{
			get
			{
				return this.GetTable<Installation>();
			}
		}
		
		public System.Data.Linq.Table<Software> Softwares
		{
			get
			{
				return this.GetTable<Software>();
			}
		}
		
		public System.Data.Linq.Table<SM> SMs
		{
			get
			{
				return this.GetTable<SM>();
			}
		}
		
		public System.Data.Linq.Table<SoftwareLisence> SoftwareLisences
		{
			get
			{
				return this.GetTable<SoftwareLisence>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Installation")]
	public partial class Installation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _SoftwareLisenceID;
		
		private string _MachineKey;
		
		private System.Nullable<System.DateTime> _Date;
		
		private System.Nullable<int> _SMSID;
		
		private EntityRef<SM> _SM;
		
		private EntityRef<SoftwareLisence> _SoftwareLisence;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnSoftwareLisenceIDChanging(System.Nullable<int> value);
    partial void OnSoftwareLisenceIDChanged();
    partial void OnMachineKeyChanging(string value);
    partial void OnMachineKeyChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnSMSIDChanging(System.Nullable<int> value);
    partial void OnSMSIDChanged();
    #endregion
		
		public Installation()
		{
			this._SM = default(EntityRef<SM>);
			this._SoftwareLisence = default(EntityRef<SoftwareLisence>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoftwareLisenceID", DbType="Int")]
		public System.Nullable<int> SoftwareLisenceID
		{
			get
			{
				return this._SoftwareLisenceID;
			}
			set
			{
				if ((this._SoftwareLisenceID != value))
				{
					if (this._SoftwareLisence.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSoftwareLisenceIDChanging(value);
					this.SendPropertyChanging();
					this._SoftwareLisenceID = value;
					this.SendPropertyChanged("SoftwareLisenceID");
					this.OnSoftwareLisenceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MachineKey", DbType="NVarChar(50)")]
		public string MachineKey
		{
			get
			{
				return this._MachineKey;
			}
			set
			{
				if ((this._MachineKey != value))
				{
					this.OnMachineKeyChanging(value);
					this.SendPropertyChanging();
					this._MachineKey = value;
					this.SendPropertyChanged("MachineKey");
					this.OnMachineKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SMSID", DbType="Int")]
		public System.Nullable<int> SMSID
		{
			get
			{
				return this._SMSID;
			}
			set
			{
				if ((this._SMSID != value))
				{
					if (this._SM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSMSIDChanging(value);
					this.SendPropertyChanging();
					this._SMSID = value;
					this.SendPropertyChanged("SMSID");
					this.OnSMSIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SM_Installation", Storage="_SM", ThisKey="SMSID", OtherKey="ID", IsForeignKey=true)]
		public SM SM
		{
			get
			{
				return this._SM.Entity;
			}
			set
			{
				SM previousValue = this._SM.Entity;
				if (((previousValue != value) 
							|| (this._SM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SM.Entity = null;
						previousValue.Installations.Remove(this);
					}
					this._SM.Entity = value;
					if ((value != null))
					{
						value.Installations.Add(this);
						this._SMSID = value.ID;
					}
					else
					{
						this._SMSID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SM");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SoftwareLisence_Installation", Storage="_SoftwareLisence", ThisKey="SoftwareLisenceID", OtherKey="id", IsForeignKey=true)]
		public SoftwareLisence SoftwareLisence
		{
			get
			{
				return this._SoftwareLisence.Entity;
			}
			set
			{
				SoftwareLisence previousValue = this._SoftwareLisence.Entity;
				if (((previousValue != value) 
							|| (this._SoftwareLisence.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SoftwareLisence.Entity = null;
						previousValue.Installations.Remove(this);
					}
					this._SoftwareLisence.Entity = value;
					if ((value != null))
					{
						value.Installations.Add(this);
						this._SoftwareLisenceID = value.id;
					}
					else
					{
						this._SoftwareLisenceID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SoftwareLisence");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Softwares")]
	public partial class Software : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private System.Nullable<int> _Qty;
		
		private System.Nullable<int> _DefaultInstallation;
		
		private string _Desc;
		
		private EntitySet<SoftwareLisence> _SoftwareLisences;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnQtyChanging(System.Nullable<int> value);
    partial void OnQtyChanged();
    partial void OnDefaultInstallationChanging(System.Nullable<int> value);
    partial void OnDefaultInstallationChanged();
    partial void OnDescChanging(string value);
    partial void OnDescChanged();
    #endregion
		
		public Software()
		{
			this._SoftwareLisences = new EntitySet<SoftwareLisence>(new Action<SoftwareLisence>(this.attach_SoftwareLisences), new Action<SoftwareLisence>(this.detach_SoftwareLisences));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qty", DbType="Int")]
		public System.Nullable<int> Qty
		{
			get
			{
				return this._Qty;
			}
			set
			{
				if ((this._Qty != value))
				{
					this.OnQtyChanging(value);
					this.SendPropertyChanging();
					this._Qty = value;
					this.SendPropertyChanged("Qty");
					this.OnQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultInstallation", DbType="Int")]
		public System.Nullable<int> DefaultInstallation
		{
			get
			{
				return this._DefaultInstallation;
			}
			set
			{
				if ((this._DefaultInstallation != value))
				{
					this.OnDefaultInstallationChanging(value);
					this.SendPropertyChanging();
					this._DefaultInstallation = value;
					this.SendPropertyChanged("DefaultInstallation");
					this.OnDefaultInstallationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Desc]", Storage="_Desc", DbType="NVarChar(MAX)")]
		public string Desc
		{
			get
			{
				return this._Desc;
			}
			set
			{
				if ((this._Desc != value))
				{
					this.OnDescChanging(value);
					this.SendPropertyChanging();
					this._Desc = value;
					this.SendPropertyChanged("Desc");
					this.OnDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Software_SoftwareLisence", Storage="_SoftwareLisences", ThisKey="ID", OtherKey="SoftwareID")]
		public EntitySet<SoftwareLisence> SoftwareLisences
		{
			get
			{
				return this._SoftwareLisences;
			}
			set
			{
				this._SoftwareLisences.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SoftwareLisences(SoftwareLisence entity)
		{
			this.SendPropertyChanging();
			entity.Software = this;
		}
		
		private void detach_SoftwareLisences(SoftwareLisence entity)
		{
			this.SendPropertyChanging();
			entity.Software = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SMS")]
	public partial class SM : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _From;
		
		private string _To;
		
		private string _Msg;
		
		private System.Nullable<System.DateTime> _Date;
		
		private System.Nullable<int> _Status;
		
		private EntitySet<Installation> _Installations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFromChanging(string value);
    partial void OnFromChanged();
    partial void OnToChanging(string value);
    partial void OnToChanged();
    partial void OnMsgChanging(string value);
    partial void OnMsgChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    #endregion
		
		public SM()
		{
			this._Installations = new EntitySet<Installation>(new Action<Installation>(this.attach_Installations), new Action<Installation>(this.detach_Installations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[From]", Storage="_From", DbType="NVarChar(50)")]
		public string From
		{
			get
			{
				return this._From;
			}
			set
			{
				if ((this._From != value))
				{
					this.OnFromChanging(value);
					this.SendPropertyChanging();
					this._From = value;
					this.SendPropertyChanged("From");
					this.OnFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[To]", Storage="_To", DbType="NVarChar(50)")]
		public string To
		{
			get
			{
				return this._To;
			}
			set
			{
				if ((this._To != value))
				{
					this.OnToChanging(value);
					this.SendPropertyChanging();
					this._To = value;
					this.SendPropertyChanged("To");
					this.OnToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Msg", DbType="NVarChar(MAX)")]
		public string Msg
		{
			get
			{
				return this._Msg;
			}
			set
			{
				if ((this._Msg != value))
				{
					this.OnMsgChanging(value);
					this.SendPropertyChanging();
					this._Msg = value;
					this.SendPropertyChanged("Msg");
					this.OnMsgChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
		public System.Nullable<int> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SM_Installation", Storage="_Installations", ThisKey="ID", OtherKey="SMSID")]
		public EntitySet<Installation> Installations
		{
			get
			{
				return this._Installations;
			}
			set
			{
				this._Installations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Installations(Installation entity)
		{
			this.SendPropertyChanging();
			entity.SM = this;
		}
		
		private void detach_Installations(Installation entity)
		{
			this.SendPropertyChanging();
			entity.SM = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SoftwareLisence")]
	public partial class SoftwareLisence : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _SoftwareID;
		
		private string _Lisence;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private string _SoftwareCRC;
		
		private System.Nullable<int> _num;
		
		private EntitySet<Installation> _Installations;
		
		private EntityRef<Software> _Software;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnSoftwareIDChanging(int value);
    partial void OnSoftwareIDChanged();
    partial void OnLisenceChanging(string value);
    partial void OnLisenceChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnSoftwareCRCChanging(string value);
    partial void OnSoftwareCRCChanged();
    partial void OnnumChanging(System.Nullable<int> value);
    partial void OnnumChanged();
    #endregion
		
		public SoftwareLisence()
		{
			this._Installations = new EntitySet<Installation>(new Action<Installation>(this.attach_Installations), new Action<Installation>(this.detach_Installations));
			this._Software = default(EntityRef<Software>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoftwareID", DbType="Int NOT NULL")]
		public int SoftwareID
		{
			get
			{
				return this._SoftwareID;
			}
			set
			{
				if ((this._SoftwareID != value))
				{
					if (this._Software.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSoftwareIDChanging(value);
					this.SendPropertyChanging();
					this._SoftwareID = value;
					this.SendPropertyChanged("SoftwareID");
					this.OnSoftwareIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lisence", DbType="NVarChar(MAX)")]
		public string Lisence
		{
			get
			{
				return this._Lisence;
			}
			set
			{
				if ((this._Lisence != value))
				{
					this.OnLisenceChanging(value);
					this.SendPropertyChanging();
					this._Lisence = value;
					this.SendPropertyChanged("Lisence");
					this.OnLisenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoftwareCRC", DbType="NVarChar(50)")]
		public string SoftwareCRC
		{
			get
			{
				return this._SoftwareCRC;
			}
			set
			{
				if ((this._SoftwareCRC != value))
				{
					this.OnSoftwareCRCChanging(value);
					this.SendPropertyChanging();
					this._SoftwareCRC = value;
					this.SendPropertyChanged("SoftwareCRC");
					this.OnSoftwareCRCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_num", DbType="Int")]
		public System.Nullable<int> num
		{
			get
			{
				return this._num;
			}
			set
			{
				if ((this._num != value))
				{
					this.OnnumChanging(value);
					this.SendPropertyChanging();
					this._num = value;
					this.SendPropertyChanged("num");
					this.OnnumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SoftwareLisence_Installation", Storage="_Installations", ThisKey="id", OtherKey="SoftwareLisenceID")]
		public EntitySet<Installation> Installations
		{
			get
			{
				return this._Installations;
			}
			set
			{
				this._Installations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Software_SoftwareLisence", Storage="_Software", ThisKey="SoftwareID", OtherKey="ID", IsForeignKey=true)]
		public Software Software
		{
			get
			{
				return this._Software.Entity;
			}
			set
			{
				Software previousValue = this._Software.Entity;
				if (((previousValue != value) 
							|| (this._Software.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Software.Entity = null;
						previousValue.SoftwareLisences.Remove(this);
					}
					this._Software.Entity = value;
					if ((value != null))
					{
						value.SoftwareLisences.Add(this);
						this._SoftwareID = value.ID;
					}
					else
					{
						this._SoftwareID = default(int);
					}
					this.SendPropertyChanged("Software");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Installations(Installation entity)
		{
			this.SendPropertyChanging();
			entity.SoftwareLisence = this;
		}
		
		private void detach_Installations(Installation entity)
		{
			this.SendPropertyChanging();
			entity.SoftwareLisence = null;
		}
	}
}
#pragma warning restore 1591
